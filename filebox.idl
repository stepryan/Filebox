module filebox {
	interface user {
		readonly attribute long id;
		attribute string username;
		attribute string password;
		attribute long lastlogin;	
	};
	typedef sequence<user> users;
	
	interface listener {
		void message(in string message);
	};
	interface MessageServer {
	void register(in listener lt);
	};
	
	interface file {
		readonly attribute long id;
		attribute string name;
		attribute string content;	
		attribute long status; // 0 - private, 1 - public
		attribute long userid;
		attribute any contentbinary;
	};
	typedef sequence<file> files;	

	interface status {
		attribute long code; // 0 - success, 1 - error
		attribute string text;
	};
	
	interface service {
		long addUser(in string username, in string password);
		user getUser(in long id);
		long login(in string username, in string password);

		long addFile(in string name, in string content, in long status, in long userid);
		file getFile(in string filename, in long uid);
		
		file changeFileStatus(in string filelist, in short fileid, in short filestatus);
		file fileUpdate(in string filelist, in long lastchanged, in  short fileid, in listener callback);
		files getFiles(in long uid, in string content, in string filename);
		void removeFile(in short fileid);
		
		void register(in listener lt);
		
		status getStatus();
		
		file addFileBinary(in any contentbinary, in string filename, in short fileid, in short filestatus);
	};
};